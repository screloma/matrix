{"version":3,"sources":["StakesSelector/StakesDropdown.js","Matrix/calculateColor.js","Matrix/Cell.js","Matrix/Matrix.js","Situations/StackDropdown.js","Situations/SituationsMatrix.js","CardSelector/CardButton.js","CardSelector/CardSelector.js","App.js","serviceWorker.js","index.js"],"names":["StakesDropdown","props","react_default","a","createElement","style","height","Dropdown_default","margin","width","marginTop","Toggle","variant","id","Menu","map","x","Item","react_router_dom","to","concat","calculateColor","cards","colors","f","colorsData","cards_data","z","w","call","fold","raise","u","goodSuit","card3","card4","raiseFoldIP","s","raiseCallIP","raiseReraiseIP","d","raiseFoldOP","T","raiseCallOP","N","raiseReraiseOP","B","callCall","X","callFold","b","callRaise","call_","Number","fold_","raise_","y","maxCallFoldRaise","Math","max","maxIP","maxOP","maxCallcallCallfoldCallraise","data","l","Object","keys","find","key","F","idle","getKeyByValue","object","value","background","Cell","objectSpread","color","textAlign","minHeight","minWidth","padding","border","Matrix","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","state","dividerBackground","headerBackground","fontColor","header","body","sharedHeader","active","checker1","checker2","bits","colStyle","maxWidth","maxHeight","params","match","_this2","stake","stack","type","hand","fcards","suit","url","comp","grid","axios","get","then","res","console","log","url_","forEach","item","index","i","assign","sort","setState","cells","_this3","reduce","resultArray","chunkIndex","floor","push","Container","Row","Col","situation","slice","React","Component","StackDropdown","tree","stacksizes","SituationsMatrix","_this$colStyle","ids","Micro Stakes","Mid Stakes","High Stakes","flex","defineProperty","emptyColStyle","greyColStyle","situations","big_blinds","filter","name","j","length","distance_l","distance_r","to_insert_l","Array","fill","to_insert_r","toConsumableArray","mw","cs","reverse","splice","unshift","pop","CardSelector","buildGrid","situationsTree","url1","url2","backgroundColor","href","coords","shape","src","usemap","App","Axios","react_router","exact","path","render","StakesSelector_StakesDropdown","StackDropdown_StackDropdown","SituationsMatrix_SituationsMatrix","CardSelector_CardSelector","Matrix_Matrix","Boolean","window","location","hostname","ReactDOM","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b83865e4.chunk.js","sourcesContent":["import React from 'react';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport { Router, Route, Link } from 'react-router-dom';\r\nfunction StakesDropdown(props) {\r\n    let stakes = ['High Stakes', 'Mid Stakes', 'Micro Stakes'];\r\n    return (\r\n        <div style={{ height: '50vh' }}>\r\n            <Dropdown\r\n                style={{ margin: '0 auto', width: '20vh', marginTop: '45vh' }}\r\n            >\r\n                <Dropdown.Toggle\r\n                    style={{ margin: '0 auto' }}\r\n                    variant=\"success\"\r\n                    id=\"dropdown-basic\"\r\n                >\r\n                    Select stakes size:\r\n                </Dropdown.Toggle>\r\n                <Dropdown.Menu>\r\n                    {stakes.map(x => {\r\n                        return (\r\n                            <Dropdown.Item>\r\n                                <Link to={`/${x}`}>{x}</Link>\r\n                            </Dropdown.Item>\r\n                        );\r\n                    })}\r\n                </Dropdown.Menu>\r\n            </Dropdown>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default StakesDropdown;\r\n","export default function calculateColor(cards, colors) {\r\n    let colorsData = colors; //this.props.colorsData;\r\n    let cards_data = cards; //this.props.data;\r\n    let f = void 0,\r\n        n = void 0;\r\n    var z = void 0,\r\n        w = void 0,\r\n        call = cards_data.call,\r\n        fold = cards_data.fold,\r\n        raise = cards_data.raise,\r\n        r = cards_data.goodSuit,\r\n        D = cards_data.card3,\r\n        c = cards_data.card4,\r\n        u = cards_data.raiseFoldIP,\r\n        s = cards_data.raiseCallIP,\r\n        x = cards_data.raiseReraiseIP,\r\n        d = cards_data.raiseFoldOP,\r\n        T = cards_data.raiseCallOP,\r\n        N = cards_data.raiseReraiseOP,\r\n        B = cards_data.callCall,\r\n        X = cards_data.callFold,\r\n        b = cards_data.callRaise,\r\n        call_ = call ? Number(call) : 0,\r\n        fold_ = fold ? Number(fold) : 0,\r\n        raise_ = raise ? Number(raise) : 0,\r\n        callCall = B ? Number(B) : 0,\r\n        callFold = X ? Number(X) : 0,\r\n        callRaise = b ? Number(b) : 0,\r\n        a = {\r\n            raiseFoldIP: u ? Number(u) : 0,\r\n            raiseCallIP: s ? Number(s) : 0,\r\n            raiseReraiseIP: x ? Number(x) : 0\r\n        },\r\n        y = {\r\n            raiseFoldOP: d ? Number(d) : 0,\r\n            raiseCallOP: T ? Number(T) : 0,\r\n            raiseReraiseOP: N ? Number(N) : 0\r\n        },\r\n        maxCallFoldRaise = Math.max(call_, fold_, raise_),\r\n        maxIP = Math.max(a.raiseFoldIP, a.raiseCallIP, a.raiseReraiseIP),\r\n        maxOP = Math.max(y.raiseFoldOP, y.raiseCallOP, y.raiseReraiseOP),\r\n        maxCallcallCallfoldCallraise = Math.max(callCall, callFold, callRaise);\r\n    if (maxCallFoldRaise === fold_ && fold_ != 0) {\r\n        z = colorsData.data.fold;\r\n        w = colorsData.data.fold;\r\n    } else if (maxCallFoldRaise === call_ && call_ != 0) {\r\n        if (maxCallcallCallfoldCallraise > 0) {\r\n            if (maxCallcallCallfoldCallraise === callFold) {\r\n                z = colorsData.data.callFold;\r\n                w = colorsData.data.callFold;\r\n            } else if (maxCallcallCallfoldCallraise === callCall) {\r\n                z = colorsData.data.callCall;\r\n                w = colorsData.data.callCall;\r\n            } else if (maxCallcallCallfoldCallraise === callRaise) {\r\n                z = colorsData.data.callRaise;\r\n                w = colorsData.data.callRaise;\r\n            }\r\n        } else {\r\n            z = colorsData.data.call;\r\n            w = colorsData.data.call;\r\n        }\r\n    } else if (maxCallFoldRaise === raise_ && raise_ != 0) {\r\n        if (maxIP > 0 && maxOP > 0) {\r\n            var l = Object.keys(cards_data).find(key => {\r\n                    return cards_data[key] === maxIP && key != 'raise';\r\n                }),\r\n                F = Object.keys(cards_data).find(key => {\r\n                    return cards_data[key] === maxOP && key != 'raise';\r\n                });\r\n            z = colorsData.data[l];\r\n            w = colorsData.data[F];\r\n        } else {\r\n            z = colorsData.data.raise;\r\n            w = colorsData.data.raise;\r\n        }\r\n    } else {\r\n        z = colorsData.data.idle;\r\n        w = colorsData.data.idle;\r\n    }\r\n\r\n    f = {\r\n        background: 'linear-gradient(90deg, ' + z + ' 50%, ' + w + ' 50%)'\r\n    };\r\n    function getKeyByValue(object, value) {\r\n        return Object.keys(object).find(key => object[key] === value);\r\n    }\r\n    /*n = r ? (e[D] >= e[c] ? D + c : c + D) : e[D] >= e[c] ? c + D : D + c;\r\n        v[n] = f;*/\r\n    //this.style = { ...this.style, background: f.background };\r\n    //this.style.background = f.background;\r\n    return [\r\n        getKeyByValue(colorsData.data, z),\r\n        getKeyByValue(colorsData.data, w),\r\n        f.background\r\n    ];\r\n}\r\n","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport calculateColor from './calculateColor';\r\nexport default function Cell(props) {\r\n    /*function calculateColor(cards, colors) {\r\n        let colorsData = colors; //this.props.colorsData;\r\n        let cards_data = cards; //this.props.data;\r\n        let f = void 0,\r\n            n = void 0;\r\n        var z = void 0,\r\n            w = void 0,\r\n            call = cards_data.call,\r\n            fold = cards_data.fold,\r\n            raise = cards_data.raise,\r\n            r = cards_data.goodSuit,\r\n            D = cards_data.card3,\r\n            c = cards_data.card4,\r\n            u = cards_data.raiseFoldIP,\r\n            s = cards_data.raiseCallIP,\r\n            x = cards_data.raiseReraiseIP,\r\n            d = cards_data.raiseFoldOP,\r\n            T = cards_data.raiseCallOP,\r\n            N = cards_data.raiseReraiseOP,\r\n            B = cards_data.callCall,\r\n            X = cards_data.callFold,\r\n            b = cards_data.callRaise,\r\n            call_ = call ? Number(call) : 0,\r\n            fold_ = fold ? Number(fold) : 0,\r\n            raise_ = raise ? Number(raise) : 0,\r\n            callCall = B ? Number(B) : 0,\r\n            callFold = X ? Number(X) : 0,\r\n            callRaise = b ? Number(b) : 0,\r\n            a = {\r\n                raiseFoldIP: u ? Number(u) : 0,\r\n                raiseCallIP: s ? Number(s) : 0,\r\n                raiseReraiseIP: x ? Number(x) : 0\r\n            },\r\n            y = {\r\n                raiseFoldOP: d ? Number(d) : 0,\r\n                raiseCallOP: T ? Number(T) : 0,\r\n                raiseReraiseOP: N ? Number(N) : 0\r\n            },\r\n            maxCallFoldRaise = Math.max(call_, fold_, raise_),\r\n            maxIP = Math.max(a.raiseFoldIP, a.raiseCallIP, a.raiseReraiseIP),\r\n            maxOP = Math.max(y.raiseFoldOP, y.raiseCallOP, y.raiseReraiseOP),\r\n            maxCallcallCallfoldCallraise = Math.max(\r\n                callCall,\r\n                callFold,\r\n                callRaise\r\n            );\r\n        if (maxCallFoldRaise === fold_ && fold_ != 0) {\r\n            z = colorsData.data.fold;\r\n            w = colorsData.data.fold;\r\n        } else if (maxCallFoldRaise === call_ && call_ != 0) {\r\n            if (maxCallcallCallfoldCallraise > 0) {\r\n                if (maxCallcallCallfoldCallraise === callFold) {\r\n                    z = colorsData.data.callFold;\r\n                    w = colorsData.data.callFold;\r\n                } else if (maxCallcallCallfoldCallraise === callCall) {\r\n                    z = colorsData.data.callCall;\r\n                    w = colorsData.data.callCall;\r\n                } else if (maxCallcallCallfoldCallraise === callRaise) {\r\n                    z = colorsData.data.callRaise;\r\n                    w = colorsData.data.callRaise;\r\n                }\r\n            } else {\r\n                z = colorsData.data.call;\r\n                w = colorsData.data.call;\r\n            }\r\n        } else if (maxCallFoldRaise === raise_ && raise_ != 0) {\r\n            if (maxIP > 0 && maxOP > 0) {\r\n                var l = Object.keys(cards_data).find(key => {\r\n                        return cards_data[key] === maxIP && key != 'raise';\r\n                    }),\r\n                    F = Object.keys(cards_data).find(key => {\r\n                        return cards_data[key] === maxOP && key != 'raise';\r\n                    });\r\n                z = colorsData.data[l];\r\n                w = colorsData.data[F];\r\n            } else {\r\n                z = colorsData.data.raise;\r\n                w = colorsData.data.raise;\r\n            }\r\n        } else {\r\n            z = colorsData.data.idle;\r\n            w = colorsData.data.idle;\r\n        }\r\n\r\n        f = {\r\n            background: 'linear-gradient(90deg, ' + z + ' 50%, ' + w + ' 50%)'\r\n        };\r\n        /*n = r ? (e[D] >= e[c] ? D + c : c + D) : e[D] >= e[c] ? c + D : D + c;\r\n            v[n] = f;\r\n        //this.style = { ...this.style, background: f.background };\r\n        //this.style.background = f.background;\r\n        return f.background;\r\n    }*/\r\n    let style = {\r\n        color: 'white',\r\n        textAlign: 'center',\r\n        minHeight: '46px',\r\n        minWidth: '46px',\r\n        padding: '0px',\r\n        margin: '0px',\r\n        border: '0.01em solid grey'\r\n    };\r\n\r\n    return (\r\n        <div\r\n            style={{\r\n                ...style,\r\n                background: calculateColor(props.data, props.colorsData)[2]\r\n            }}\r\n        >\r\n            {props.data.card3}\r\n            {props.data.card4}\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport axios from 'axios';\r\nimport Cell from './Cell';\r\nimport { Row, Container, Col } from 'react-bootstrap';\r\nimport equal from 'fast-deep-equal';\r\nimport { Router, Route, Link } from 'react-router-dom';\r\nimport calculateColor from './calculateColor';\r\nexport default class Matrix extends React.Component {\r\n    state = {};\r\n    componentDidMount() {\r\n        const stake = this.params.stake,\r\n            stack = this.params.stack,\r\n            type = this.params.type,\r\n            hand = this.params.fcards,\r\n            suit = this.params.suit;\r\n        let url = `/data/${stake}/${stack}/${type}/${hand}/${suit}`;\r\n        function comp(a, b) {\r\n            if (a.x === b.x) {\r\n                return a.y > b.y ? 1 : -1;\r\n            }\r\n            return a.x > b.x ? 1 : -1;\r\n        }\r\n        let grid = [];\r\n        axios\r\n            .get('/grid_.json')\r\n            .then(res => {\r\n                grid = res;\r\n            })\r\n            .then(() => {\r\n                console.log(grid);\r\n                return axios.get(url).then(res => {\r\n                    let url_ = `${url}/${res.data[0]}`;\r\n                    return axios.get(url_).then(data => {\r\n                        console.log(data);\r\n                        let res = [];\r\n                        grid.data.forEach((item, index) => {\r\n                            let a = data.data.find(i => {\r\n                                return (\r\n                                    item.card3 === i.card3 &&\r\n                                    item.card4 === i.card4 &&\r\n                                    item.goodSuit === i.goodSuit\r\n                                );\r\n                            });\r\n                            if (a) {\r\n                                Object.assign(item, a);\r\n                            }\r\n                        });\r\n                        grid.data.sort(comp);\r\n                        return grid;\r\n                    });\r\n                });\r\n            })\r\n            .then(res => {\r\n                this.setState({ cells: res });\r\n            });\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.params = this.props.match.params;\r\n    }\r\n\r\n    colorsData = {\r\n        dividerBackground: '-0.20',\r\n        headerBackground: '#626262',\r\n        fontColor: { header: 'white', body: 'white' },\r\n        sharedHeader: '#393939',\r\n        active: 'rgba(0, 0, 0, 0.46)',\r\n        data: {\r\n            idle: 'black',\r\n            checker1: null,\r\n            checker2: null,\r\n            call: 'rgb(102, 150, 53)',\r\n            raise: 'rgb(219, 36, 47)',\r\n            fold: 'rgb(174, 174, 174)',\r\n            raiseFoldIP: 'rgb(89, 57, 185)',\r\n            raiseCallIP: 'rgb(246, 171, 42)',\r\n            raiseReraiseIP: 'rgb(241, 69, 19)',\r\n            raiseFoldOP: 'rgb(89, 57, 185)',\r\n            raiseCallOP: 'rgb(246, 171, 42)',\r\n            raiseReraiseOP: 'rgb(241, 69, 19)',\r\n            callRaise: 'rgb(246, 147, 120)',\r\n            callFold: 'rgb(138, 120, 191)',\r\n            callCall: 'rgb(252, 209, 145)'\r\n        },\r\n        bits: {}\r\n    };\r\n    colStyle = {\r\n        padding: '0px',\r\n        margin: '0px',\r\n        maxWidth: '46px',\r\n        maxHeight: '46px'\r\n    };\r\n    a = null;\r\n    render() {\r\n        if (this.state.cells) {\r\n            this.a = this.state.cells;\r\n            this.a.data = this.a.data.reduce((resultArray, item, index) => {\r\n                const chunkIndex = Math.floor(index / 13);\r\n\r\n                if (!resultArray[chunkIndex]) {\r\n                    resultArray[chunkIndex] = []; // start a new chunk\r\n                }\r\n\r\n                resultArray[chunkIndex].push(item);\r\n\r\n                return resultArray;\r\n            }, []);\r\n            return (\r\n                <Container\r\n                    style={{\r\n                        margin: '0 auto',\r\n                        width: '70vh',\r\n                        marginTop: '10vh'\r\n                    }}\r\n                >\r\n                    <Row>\r\n                        <Col>\r\n                            <Link to={`/`}>{this.params.stake}</Link>\r\n                        </Col>\r\n                        <Col>\r\n                            <Link to={`/${this.params.stake}`}>\r\n                                {this.params.stack}\r\n                            </Link>\r\n                        </Col>\r\n                        <Col>\r\n                            <Link\r\n                                to={`/${this.params.stake}/${this.params.stack}`}\r\n                            >\r\n                                {this.params.type}\r\n                            </Link>\r\n                        </Col>\r\n                        <Col>\r\n                            <Link\r\n                                to={`/${this.params.stake}/${this.params.stack}/${this.params.situation}/${this.params.type}`}\r\n                            >\r\n                                {this.params.fcards} {this.params.suit}\r\n                            </Link>\r\n                        </Col>\r\n                    </Row>\r\n                    {this.a.data.map(x => {\r\n                        return (\r\n                            <Row>\r\n                                {x.map(y => {\r\n                                    let bg = calculateColor(y, this.colorsData);\r\n                                    bg.slice(0, -1).map(x => {\r\n                                        this.colorsData.bits[x] = true;\r\n                                    });\r\n                                    return (\r\n                                        <Col style={this.colStyle}>\r\n                                            <Cell\r\n                                                colorsData={this.colorsData}\r\n                                                data={y}\r\n                                            />\r\n                                        </Col>\r\n                                    );\r\n                                })}\r\n                            </Row>\r\n                        );\r\n                    })}\r\n                    <Row style={{ marginTop: '5vh' }}>\r\n                        {Object.keys(this.colorsData.bits).map(x => {\r\n                            {\r\n                                return (\r\n                                    <Col>\r\n                                        <div>\r\n                                            <div\r\n                                                style={{\r\n                                                    width: '46px',\r\n                                                    height: '46px',\r\n                                                    background: `${this.colorsData.data[x]}`\r\n                                                }}\r\n                                            ></div>\r\n\r\n                                            {x}\r\n                                        </div>\r\n                                    </Col>\r\n                                );\r\n                            }\r\n                        })}\r\n                    </Row>\r\n                </Container>\r\n            );\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\nimport Matrix from '../Matrix/Matrix';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport axios from 'axios';\r\nimport { Router, Route, Link } from 'react-router-dom';\r\n\r\nexport default class StackDropdown extends React.Component {\r\n    componentDidMount() {\r\n        axios.get('/data/situations.json').then(res => {\r\n            this.setState({ tree: res.data[0] });\r\n        });\r\n    }\r\n    state = {};\r\n    render() {\r\n        if (this.state.tree) {\r\n            let stacksizes = Object.keys(\r\n                this.state.tree[this.props.match.params.stake]\r\n            );\r\n            return (\r\n                <div style={{ height: '50vh' }}>\r\n                    <div\r\n                        style={{\r\n                            margin: '0 auto',\r\n                            width: '20vh',\r\n                            marginTop: '45vh'\r\n                        }}\r\n                    >\r\n                        <Link to={`/`}>{this.props.match.params.stake}</Link>\r\n                        <Dropdown>\r\n                            <Dropdown.Toggle\r\n                                variant=\"success\"\r\n                                id=\"dropdown-basic\"\r\n                            >\r\n                                Select stack size:\r\n                            </Dropdown.Toggle>\r\n                            <Dropdown.Menu>\r\n                                {stacksizes.map(x => {\r\n                                    return (\r\n                                        <Dropdown.Item>\r\n                                            <Link\r\n                                                to={`/${this.props.match.params.stake}/${x}`}\r\n                                            >\r\n                                                {x}\r\n                                            </Link>\r\n                                        </Dropdown.Item>\r\n                                    );\r\n                                })}\r\n                            </Dropdown.Menu>\r\n                        </Dropdown>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\nimport Matrix from '../Matrix/Matrix';\r\nimport StackDropdown from './StackDropdown';\r\nimport CardButton from '../CardSelector/CardButton';\r\nimport { Row, Container, Col } from 'react-bootstrap';\r\nimport axios from 'axios';\r\nimport { O_DSYNC } from 'constants';\r\nimport { Router, Route, Link } from 'react-router-dom';\r\n\r\nexport default class SituationsMatrix extends React.Component {\r\n    state = {};\r\n    grid = [];\r\n    ids = { 'Micro Stakes': 0, 'Mid Stakes': 1, 'High Stakes': 2 };\r\n    constructor(props) {\r\n        super(props);\r\n        this.params = this.props.match.params;\r\n    }\r\n    colStyle = {\r\n        padding: '0px',\r\n        margin: '0px',\r\n        textAlign: 'center',\r\n        flex: '0 0 80px',\r\n        height: '80px',\r\n        padding: '0px',\r\n        margin: '0px',\r\n        border: '0.01em solid black'\r\n    };\r\n    emptyColStyle = {\r\n        ...this.colStyle,\r\n        background: 'black'\r\n    };\r\n    greyColStyle = { ...this.emptyColStyle, background: 'grey' };\r\n\r\n    componentDidMount() {\r\n        axios.get('/data/result.json').then(res => {\r\n            this.setState(\r\n                {\r\n                    situations: res.data[\r\n                        this.ids[this.params.stake]\r\n                    ].big_blinds.filter(\r\n                        item => item.name == this.params.stack\r\n                    )[0][this.params.stack]\r\n                },\r\n                () => {}\r\n            );\r\n        });\r\n    }\r\n    render() {\r\n        if (this.state.situations) {\r\n            this.grid = [\r\n                [\r\n                    { situation: 'RFI' },\r\n                    { situation: 'UTG' },\r\n                    { situation: 'MP' },\r\n                    { situation: 'CO' },\r\n                    { situation: 'BTN' },\r\n                    { situation: 'SB' },\r\n                    { situation: 'BB' },\r\n                    { situation: 'MW' }\r\n                ]\r\n            ];\r\n            let j = 0;\r\n            let max = this.params.stack == 'HU' ? 3 : 6;\r\n            if (this.params.stack == 'HU') {\r\n                let s = [];\r\n                for (let i = 0; i < 5; ++i) {\r\n                    s.push([\r\n                        this.state.situations[i],\r\n                        this.state.situations[i + 5],\r\n                        this.state.situations[i + 10]\r\n                    ]);\r\n                }\r\n                const gridlen = 8;\r\n                for (let i = 0; i < s.length; ++i) {\r\n                    let distance_l = i + 1;\r\n                    let distance_r = gridlen - distance_l - 3;\r\n                    let to_insert_l = Array(distance_l).fill(0);\r\n                    let to_insert_r = Array(distance_r).fill(-1);\r\n                    this.grid.push([...to_insert_l, ...s[i], ...to_insert_r]);\r\n                }\r\n            } else {\r\n                let mw = [],\r\n                    cs = [];\r\n                if (this.params.stack == '250BB') {\r\n                    mw = this.state.situations.slice(15, 22).reverse();\r\n                    cs = this.state.situations.slice(0, 16);\r\n                    cs.splice(5, 0, -1, -1, -1, -1, -1);\r\n                    cs.unshift(-1);\r\n                } else {\r\n                    mw = this.state.situations.slice(21, 28).reverse();\r\n                    cs = this.state.situations.slice(0, 21);\r\n                }\r\n                for (let i = max; i >= 0; i--) {\r\n                    let a = new Array(max - i + 1).fill(0);\r\n                    this.grid.push(\r\n                        a.concat(cs.slice(j, j + i)).concat(mw.pop())\r\n                    );\r\n                    j += i;\r\n                }\r\n                console.log(this.grid);\r\n            }\r\n        }\r\n        return this.state.situations ? (\r\n            <Container\r\n                style={{\r\n                    margin: '0 auto',\r\n                    width: '70vh',\r\n                    marginTop: '10vh'\r\n                }}\r\n            >\r\n                <Row>\r\n                    <Col>\r\n                        <Link to={`/`}>{this.params.stake}</Link>\r\n                    </Col>\r\n                    <Col>\r\n                        <Link to={`/${this.params.stake}`}>\r\n                            {this.params.stack}\r\n                        </Link>\r\n                    </Col>\r\n                </Row>\r\n                {this.grid.map(x => {\r\n                    return (\r\n                        <Row>\r\n                            {x.map(y => {\r\n                                return y == 0 ? (\r\n                                    <Col style={this.emptyColStyle}></Col>\r\n                                ) : y == -1 ? (\r\n                                    <Col style={this.greyColStyle}></Col>\r\n                                ) : y.id ? (\r\n                                    <Col style={this.colStyle}>\r\n                                        <Link\r\n                                            to={`/${this.params.stake}/${this.params.stack}/${y.situation}/${y.type}`}\r\n                                        >\r\n                                            {y.situation}\r\n                                        </Link>\r\n                                    </Col>\r\n                                ) : (\r\n                                    <Col style={this.colStyle}>\r\n                                        {y.situation}\r\n                                    </Col>\r\n                                );\r\n                            })}\r\n                        </Row>\r\n                    );\r\n                })}\r\n            </Container>\r\n        ) : null;\r\n    }\r\n}\r\n","import React from 'react';\r\nimport Matrix from '../Matrix/Matrix';\r\nimport Button from 'react-bootstrap/Button';\r\nexport default class CardButton extends React.Component {\r\n    style = {\r\n        color: 'black',\r\n        textAlign: 'center',\r\n        minHeight: '46px',\r\n        minWidth: '46px',\r\n        padding: '0px',\r\n        margin: '0px',\r\n        border: '0.01em solid grey'\r\n    };\r\n    render() {\r\n        return (\r\n            <div\r\n                style={this.style}\r\n                onClick={this.props.handleClick(\r\n                    this.props.suit,\r\n                    this.props.hand\r\n                )}\r\n            >\r\n                {this.props.hand}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport { Row, Container, Col } from 'react-bootstrap';\r\nimport axios from 'axios';\r\nimport { Router, Route, Link } from 'react-router-dom';\r\n\r\nexport default class CardSelector extends React.Component {\r\n    buildGrid = (hand, suit) => {\r\n        const situation = Object.keys(\r\n            this.situationsTree[this.stake][this.state.stack]\r\n        )[0];\r\n        const stake = this.stake,\r\n            stack = this.state.stack;\r\n        let url = `/data/${stake}/${stack}/${situation}/${hand}/${suit}`;\r\n        function comp(a, b) {\r\n            if (a.x === b.x) {\r\n                return a.y > b.y ? 1 : -1;\r\n            }\r\n            return a.x > b.x ? 1 : -1;\r\n        }\r\n        let grid = [];\r\n        return axios\r\n            .get('grid_.json')\r\n            .then(res => {\r\n                grid = res;\r\n            })\r\n            .then(() => {\r\n                console.log(grid);\r\n                return axios.get(url).then(res => {\r\n                    let url_ = `${url}/${res.data[0]}`;\r\n                    return axios.get(url_).then(data => {\r\n                        console.log(data);\r\n                        let res = [];\r\n                        grid.data.forEach((item, index) => {\r\n                            let a = data.data.find(i => {\r\n                                return (\r\n                                    item.card3 === i.card3 &&\r\n                                    item.card4 === i.card4 &&\r\n                                    item.goodSuit === i.goodSuit\r\n                                );\r\n                            });\r\n                            if (a) {\r\n                                Object.assign(item, a);\r\n                            }\r\n                        });\r\n                        grid.data.sort(comp);\r\n                        return grid;\r\n                    });\r\n                });\r\n            });\r\n    };\r\n\r\n    componentDidMount() {\r\n        axios.get('/grid_.json').then(res => {\r\n            this.grid = res.data;\r\n            this.grid = this.grid.reduce((resultArray, item, index) => {\r\n                const chunkIndex = Math.floor(index / 13);\r\n\r\n                if (!resultArray[chunkIndex]) {\r\n                    resultArray[chunkIndex] = []; // start a new chunk\r\n                }\r\n\r\n                resultArray[chunkIndex].push(item);\r\n\r\n                return resultArray;\r\n            }, []);\r\n            this.grid = this.grid.slice(0, -2);\r\n            this.grid = this.grid.map(x => {\r\n                return x.slice(0, -2);\r\n            });\r\n            this.setState({ grid: this.grid });\r\n        });\r\n    }\r\n    state = {};\r\n    constructor(props) {\r\n        super(props);\r\n        this.params = this.props.match.params;\r\n        console.log(this.params);\r\n    }\r\n\r\n    colStyle = {\r\n        padding: '0px',\r\n        margin: '0px',\r\n        textAlign: 'center',\r\n        flex: '0 0 46px',\r\n        width: '46px',\r\n        color: 'white',\r\n        height: '46px',\r\n        padding: '0px',\r\n        margin: '0px',\r\n        border: '0.01em solid grey'\r\n        //boxSizing: 'border-box'\r\n    };\r\n    render() {\r\n        if (this.state.grid) {\r\n            return (\r\n                <Container\r\n                    style={{\r\n                        margin: '0 auto',\r\n                        width: '55vh',\r\n                        marginTop: '10vh'\r\n                    }}\r\n                >\r\n                    <Row>\r\n                        <Col>\r\n                            <Link to={`/`}>{this.params.stake}</Link>\r\n                        </Col>\r\n                        <Col>\r\n                            <Link to={`/${this.params.stake}`}>\r\n                                {this.params.stack}\r\n                            </Link>\r\n                        </Col>\r\n                        <Col>\r\n                            <Link\r\n                                to={`/${this.params.stake}/${this.params.stack}`}\r\n                            >\r\n                                {this.params.type}\r\n                            </Link>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    {this.grid.map(x => {\r\n                        return (\r\n                            <Row>\r\n                                {x.map(y => {\r\n                                    let s = {\r\n                                        margin: '0 auto',\r\n                                        width: '50vh'\r\n                                    };\r\n                                    let c3,\r\n                                        c4 = [y.card3, y.card4];\r\n                                    let url1 = `/${this.params.stake}/${\r\n                                        this.params.stack\r\n                                    }/${this.params.situation}/${\r\n                                        this.params.type\r\n                                    }/${y.card3}${y.card4}/${'DS'}`;\r\n                                    let url2 = `/${this.params.stake}/${\r\n                                        this.params.stack\r\n                                    }/${this.params.situation}/${\r\n                                        this.params.type\r\n                                    }/${y.card3}${y.card4}/${'SS'}`;\r\n                                    return (\r\n                                        <Col\r\n                                            style={{\r\n                                                ...{\r\n                                                    backgroundColor: 'white'\r\n                                                    /*y.card3 == y.card4\r\n                                                            ? '#87CEFA'\r\n                                                            : y.goodSuit\r\n                                                            ? '#F0E68C'\r\n                                                            : '#DC143C'\r\n                                                        */\r\n                                                },\r\n                                                ...this.colStyle\r\n                                            }}\r\n                                        >\r\n                                            {y.card3 == y.card4 ? (\r\n                                                <div>\r\n                                                    <map\r\n                                                        name={`image-map${y.card3}${y.card4}`}\r\n                                                    >\r\n                                                        <area\r\n                                                            href={url1}\r\n                                                            coords=\"3,0,45,0,45,44\"\r\n                                                            shape=\"poly\"\r\n                                                        />\r\n                                                        <area\r\n                                                            href={url2}\r\n                                                            coords=\"1,0,2,44,44,45,2,2 \"\r\n                                                            shape=\"poly\"\r\n                                                        />\r\n                                                    </map>\r\n                                                    <img\r\n                                                        src=\"/123.png\"\r\n                                                        usemap={`#image-map${y.card3}${y.card4}`}\r\n                                                    ></img>\r\n                                                </div>\r\n                                            ) : (\r\n                                                <Link\r\n                                                    style={{ color: 'black' }}\r\n                                                    to={`/${\r\n                                                        this.params.stake\r\n                                                    }/${this.params.stack}/${\r\n                                                        this.params.situation\r\n                                                    }/${this.params.type}/${\r\n                                                        y.card3\r\n                                                    }${y.card4}/${\r\n                                                        y.goodSuit ? 'SS' : 'DS'\r\n                                                    }`}\r\n                                                >\r\n                                                    {y.card3}\r\n                                                    {y.card4}\r\n                                                </Link>\r\n                                            )}\r\n                                        </Col>\r\n                                    );\r\n                                })}\r\n                            </Row>\r\n                        );\r\n                    })}\r\n                </Container>\r\n            );\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport Axios from 'axios';\nimport { Route, Switch } from 'react-router-dom';\nimport StakesDropdown from './StakesSelector/StakesDropdown';\nimport StackDropdown from './Situations/StackDropdown';\nimport SituationsMatrix from './Situations/SituationsMatrix';\nimport CardSelector from './CardSelector/CardSelector';\nimport Matrix from './Matrix/Matrix';\nexport default class App extends React.Component {\n    componentDidMount() {\n        Axios.get('/data/situations.json').then(res => {\n            this.setState({ tree: res.data[0] });\n        });\n    }\n\n    state = { tree: '' };\n    render() {\n        return (\n            <div>\n                <Switch>\n                    <Route\n                        exact\n                        path=\"/\"\n                        render={props => <StakesDropdown />}\n                    ></Route>\n                    <Route\n                        exact\n                        path=\"/:stake\"\n                        render={props => <StackDropdown {...props} />}\n                    ></Route>\n                    <Route\n                        exact\n                        path=\"/:stake/:stack\"\n                        render={props => <SituationsMatrix {...props} />}\n                    ></Route>\n                    <Route\n                        exact\n                        path=\"/:stake/:stack/:situation/:type\"\n                        render={props => <CardSelector {...props} />}\n                    ></Route>\n                    <Route\n                        exact\n                        path=\"/:stake/:stack/:situation/:type/:fcards/\"\n                        render={props => <Matrix {...props} />}\n                    ></Route>\n                    <Route\n                        exact\n                        path=\"/:stake/:stack/:situation/:type/:fcards/:suit\"\n                        render={props => <Matrix {...props} />}\n                    ></Route>\n                </Switch>\n            </div>\n        );\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}